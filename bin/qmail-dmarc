#!perl

use 5.014;
use warnings;

use IO::Handle;

my $feedback_fh;

BEGIN {
    # Open ASAP before the handle gets reused:
    $feedback_fh = IO::Handle->new_from_fd( 4, 'w' )
      or warn "Cannot open feedback handle: $!";
}

use FindBin ();
use Mail::DKIM::Verifier;
use Mail::DMARC::PurePerl;
use Mail::Qmail::Queue::Message::Extended;
use Mail::SPF::Query;

my @debug;

sub debug {
    push @debug, join ': ', @_;
}

sub domain {
    shift =~ s/.*\@//r;
}

sub if_defined {
    my ( $key, $value ) = @_;
    return unless defined $value;
    $key => $value;
}

sub reject {
    $feedback_fh->say("D@_");
    debug action => 'reject';
    exit 88 if $ENV{DMARC_REJECT};
}

my $message = Mail::Qmail::Queue::Message::Extended->receive
  or die "Invalid message\n";

$SIG{__DIE__} = sub {
    debug died => "@_";
    die @_;
};

my $envelope_from = $message->from;
debug from => $envelope_from;
debug to => join ', ', $message->to;

if ( exists $ENV{RELAYCLIENT} ) {
    debug RELAYCLIENT => "$ENV{TCPREMOTEHOST} [$ENV{TCPREMOTEIP}]";
}
else {

    my $dkim = Mail::DKIM::Verifier->new;
    $dkim->PRINT( $message->body =~ s/\cM?\cJ/\cM\cJ/gr );
    $dkim->CLOSE;
    debug 'DKIM result' => $dkim->result;

    if ( $dkim->result ne 'pass' ) {

        my $header_from = $message->header_from;
        my $header_from_domain = $header_from->host if $header_from;

        if ($header_from_domain) {
            open my $rcpthosts, '<', '/var/qmail/control/rcpthosts';
            while (<$rcpthosts>) {
                chomp;
                reject 'valid DKIM signature required for sender domain '
                  . $header_from_domain
                  if lc eq lc $header_from_domain;
            }
        }

        my $helo = $message->helo;
        debug helo => $helo;
        my $spf = Mail::SPF::Query->new(
            ip   => $ENV{TCPREMOTEIP},
            helo => $helo,
            $header_from ? ( sender => scalar $header_from->address ) : (),
        );
        my ( $spf_result, $smtp_comment, $header_comment, $spf_record, $detail )
          = $spf->result;
        $message->add_header("Received-SPF: $spf_result ($header_comment)");
        debug 'SPF result' => "$spf_result ($header_comment)";

        my $dmarc_text = (
            my $dmarc_result = Mail::DMARC::PurePerl->new(
                source_ip   => $ENV{TCPREMOTEIP},
                envelope_to => domain( ( $message->to )[0] ),
                if_defined( envelope_from => domain($envelope_from) ),
                if_defined( header_from   => $header_from_domain ),
                dkim => $dkim,
                spf  => {
                    if_defined(
                        domain => $header_from_domain
                    ),
                    scope  => 'mfrom',
                    result => $spf_result,
                },
            )->validate
        )->result;
        debug 'DMARC result' => $dmarc_text;

        if ( $dmarc_result->result ne 'pass' ) {
            my $disposition = $dmarc_result->disposition;
            debug 'DMARC disposition' => $disposition;
            reject 'Failed DMARC test.' if $disposition eq 'reject';
            $message->add_header("MinD-DMARC-Status: $dmarc_text");
        }
    }
}

delete $ENV{QMAILQUEUE};    # use original qmail-queue
$message->send == 0 or die "Error sending message: exit status $?\n";
debug action => 'queue';

END {
    debug 'exit code' => $?;
    say STDERR "$FindBin::Script\[$$]: " . join '; ', @debug;
}
